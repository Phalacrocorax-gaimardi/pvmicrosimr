get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::mutate(area1 = area1 - (solar1-old_solar1)/kWpm2, area2 = area2 - (solar2-old_solar2)/kWpm2)
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
b_s1
b_s1 %>% dplyr::select(area1,area2,old_solar1,new_solar1,old_solar2,new_solar2)
load_all()
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#params at yeartime
params <- scenario_params_df(sD,yeartime)
#self-sufficiency
averse <- c(0,0,0,aversion_4.,aversion_5.)*params$self_sufficiency_effect
#parameters from scenario corresponding to yeartime
kWpm2 <- params$kWp_per_m2
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.*params$acceleration_factor))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,area1,area2,shading1,shading2,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
load_all()
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
cer_sys
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt
cer_sys_opt <- cer_sys_opt %>% dplyr::mutate(area1 = area1 - (solar1-old_solar1)/kWpm2, area2 = area2 - (solar2-old_solar2)/kWpm2)
cer_sys_opt
cer_sys_opt %>% colnames()
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::mutate(area1 = area1 - (solar1-old_solar1)/kWpm2, area2 = area2 - (solar2-old_solar2)/kWpm2)
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when((old_solar1 > 0 | old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_qsp21*du_social[qsp21]))
#+lambda. or +w_theta*lambda.?
b_s1 <- b_s1 %>% dplyr::mutate(du_theta = dplyr::case_when((old_solar1 > 0 | old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_theta*theta+ lambda.))
b_s1 <- b_s1 %>% dplyr::mutate(du_tot = du_fin+du_social+du_theta)
#some agents do not transact even when du_fin > 0
b_s_transact <- b_s1 %>% dplyr::filter(du_tot > 0)
b_s_notransact <- b_s1 %>% dplyr::filter(du_tot <= 0)
b_s_transact$transaction <- T
b_s_notransact$transaction <- F
#this line reverses transactions that would occur of du were only term
b_s_notransact <- b_s_notransact %>% dplyr::mutate(new_solar1=old_solar1,new_solar2=old_solar2,new_battery=old_battery)
#b_s <- update_cars(b_s,params)
#
a_s <- dplyr::filter(a_s, !(ID %in% c(b_s_notransact$ID,b_s_transact$ID)))
a_s <- dplyr::bind_rows(a_s,b_s_notransact,b_s_transact) %>% dplyr::arrange(as.numeric(ID))
a_s <- a_s %>% dplyr::mutate(new_solar1 = tidyr::replace_na(new_solar1,0), new_solar2 = tidyr::replace_na(new_solar2,0),new_battery = tidyr::replace_na(new_battery,0))
#recompute social variable
ma <- igraph::get.adjacency(social_network)
load_all()
runABM(scenario_wem,4,2022)
runABM(scenario_wem,1,2022,use_parallel = F)
params$e_demand_factor
dim(pv_survey)
dim(pv_survey_oo)
bills_oo
lambda=2
#survey_raw <- read_csv("~/Policy/AgentBasedModels/Survey/ESB Final data +LCA.csv")
#bills <- survey_raw$q9_1 %>% na_if(9999)
pv_survey1 <- pv_survey_oo
pv_survey1$bill <- bills_oo$q9_1
bills_oo
pv_survey1$bill <- bills_oo
#fill in missing bills
#replace by median bill in category
pv_survey1 <- pv_survey1 %>% dplyr::mutate(bill=dplyr::na_if(bill,9999))
pv_survey1 <- pv_survey1 %>% dplyr::mutate(bill=dplyr::na_if(bill,0))
pv_survey1 <- pv_survey1 %>% dplyr::group_by(q1,qk) %>% dplyr::mutate(bill=ifelse(is.na(bill), median(bill,na.rm=T),bill))
pv_survey1 <- pv_survey1 %>% dplyr::group_by(q1) %>% dplyr::mutate(bill=ifelse(is.na(bill), median(bill,na.rm=T),bill))
pv_survey1 <- pv_survey1 %>% dplyr::group_by(qk) %>% dplyr::mutate(bill=ifelse(is.na(bill), median(bill,na.rm=T),bill))
pv_survey1 <- pv_survey1 %>% dplyr::ungroup()
#slightly adjust mu from default that excludes NAs
pv_survey1$demand <- get_kWh_from_bills(pv_survey1$bill,mu=8.37)
#scale survey demand to reflect annual variability
f <- seai_elec %>% dplyr::filter(year==2018) %>% dplyr::pull(kWh)/seai_elec %>% dplyr::filter(year==2010) %>% dplyr::pull(kWh)
pv_survey1$demand <- pv_survey1$demand*params$e_demand_factor/f
cer_match0  <- function(demand_1,lam){
#matches stochastically to demand
#demand_1 is pv_survey demand inferred from latest bi-monthly bills
#
cer_survey_reduced0 <- cer_survey %>% dplyr::filter(housing_type != 1) %>% dplyr::select(housecode,demand)
if(is.na(demand_1)) res <- cer_survey_reduced0 %>% dplyr::slice_sample(n=1) %>% dplyr::pull(housecode)
if(!is.na(demand_1)) {wts <- exp(-lam*abs(demand_1-cer_survey_reduced0$demand)/1000)
if(sum(wts)==0) wts[which.max(cer_survey_reduced0$demand)] <- 1
res <- cer_survey_reduced0 %>% dplyr::slice_sample(n=1, weight_by = wts) %>% dplyr::pull(housecode)}
return(res)
}
pv_survey1 <- pv_survey1 %>% dplyr::rowwise() %>% dplyr::mutate(housecode = cer_match0(demand,lambda))
#
test <- cer_survey %>% dplyr::select(housecode,demand) %>% dplyr::rename("cer_demand"=demand)
pv_survey1 <- pv_survey1 %>% dplyr::inner_join(test) %>% dplyr::ungroup()
pv_survey1 <- pv_survey1 %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
pv_survey1
load_all()
document()
check()
install()
params$usable_roof_fraction
library(devtools)
load_all()
agents_in <- initialise_agents(agents_init ,2010)
agents_in
scenario_wem <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx", sheet="scenario_WEM")
use_data(scenario_wem,overwrite = T,version=3)
sD <- scenario_wem
yeartime <- 2022
p.
lambda.
#
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
empirical_u = empirical_utils
#
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#params at yeartime
params <- scenario_params_df(sD,yeartime)
#self-sufficiency
averse <- c(0,0,0,aversion_4.,aversion_5.)*params$self_sufficiency_effect
kWpm2 <- params$kWp_per_m2
a_s <- agents_in
a_s$transaction <- F
kWpm2
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.*params$acceleration_factor))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,area1,area2,shading1,shading2,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
dim(cer_sys)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
dim(cer_sys)
cer_sys$solar1%>% range()
cer_systems
cer_sys
cer_systems
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- cer_systems %>% right_join(b_s %>% select(housecode, aspect,shading1,shading2))
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- cer_systems %>% dplyr::right_join(b_s %>% select(housecode, aspect,shading1,shading2))
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- cer_systems %>% dplyr::right_join(b_s %>% dplyr::select(housecode, aspect,shading1,shading2))
cer_sys
cer_sys %>% dim()
dim(b_s)
cer_sys %>% dim()/6
cer_sys$housecode %>% unique()
cer_sys$aspect %>% unique()
cer_sys
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
sol_vals1 <- shading1*sol_vals
sol_vals2 <- shading2*sol_vals
er_sys
cer_sys
cer_sys$housecode %>% unique()
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% group_by(housecode,battery) %>% mutate(imports_eff = interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = interp2(x=sol_vals1,
y=sol_vals2,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals1,
y=sol_vals2,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals1,
y=sol_vals2,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
warnings()
cer_systems <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems.csv")
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::select(housecode, aspect,shading1,shading2) %>% left_join(cer_systems)
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::select(housecode, aspect,shading1,shading2) %>% dplyr::left_join(cer_systems)
test <- get_shaded_sys(cer_sys)
test
test %>% filter(solar1==5,solar2==0,battery==0)
test %>% dplyr::filter(solar1==5,solar2==0,battery==0)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys %>% dplyr::select(-solar1_eff,-solar2_eff))
}
test %>% dplyr::filter(solar1==5,solar2==0,battery==0)
test <- get_shaded_sys(cer_sys)
test %>% dplyr::filter(solar1==5,solar2==0,battery==0)
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% summarise(mean(imports_eff/imports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(imports_eff/imports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(exportss_eff/exports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(exports_eff/exports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(exports_eff/exports))
test
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,imports_eff))+ggplot2::geom_point()
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% dplyr::summarise(mean(exports_eff/exports))
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,imports_eff))+ggplot2::geom_point()
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,imports_eff/imports))+ggplot2::geom_point()
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,exports_eff/exports))+ggplot2::geom_point()
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys %>% dplyr::select(-solar1_eff,-solar2_eff))
}
test <- get_shaded_sys(cer_sys)
test
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::select(housecode, aspect,shading1,shading2) %>% dplyr::left_join(cer_systems)
cer_sys <- get_shaded_sys(cer_sys)
cer_sys
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
cer_sys <- get_shaded_sys(cer_sys)
cer_sys
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
test <- get_cer_sys_optimal(params,b_s)
test <- get_sys_optimal(params,b_s)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
cer_sys <- get_shaded_sys(cer_sys)
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::mutate(area1 = area1 - (solar1-old_solar1)/kWpm2, area2 = area2 - (solar2-old_solar2)/kWpm2)
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
test <- get_sys_optimal(params,b_s)
test
cer_systems1 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems1.csv")
cer_systems2 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems2.csv")
cer_systems3 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems3.csv")
cer_systems4 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems4.csv")
use_data(cer_systems1,version = 3)
use_data(cer_systems2,version = 3)
use_data(cer_systems3,version = 3)
use_data(cer_systems4,version = 3)
cer_systems <- bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4)
cer_systems <- dplyr::bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4)
dim(cer_systems)
load_all()
cer_systems1
document()
warnings()
check()
cer_systems1
rm(cer_systems1)
rm(cer_systems2)
rm(cer_systems3)
rm(cer_systems4)
rm(cer_systems)
cer_systems
rm(cer_systems)
cer_systems
cer_systems1
load_all()
help(cer_systems1)
cer_systems1
cer_systems
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
params <- scenario_params_df(scenario_wem,2023)
seai_grant(params,10,0)
seai_grant(params,10,5)
cer_systems2
cer_systems1
cer_systems1
cer_systems1
cer_systems2
cer_systems1
cer_systems2
cer_systems4
cer_systems4 %>% filter(house==1036)
cer_systems4 %>% filter(housecode==1036)
cer_systems4 %>% dplyr::filter(housecode==1036)
cer_systems4 %>% dplyr::filter(housecode==1036, solar1==5,solar2==5,battery==0)
load_all()
load_all()
load_all()
load_all()
document()
check()
install()
load_all()
library(devtools)
load_all()
document()
check()
install()
ceg_fin(scenario_wem,2010)
ceg_fin(scenario_wem,2010)
ceg_fun(scenario_wem,2010)
ceg_fun(scenario_wem,2015)
ceg_fun(scenario_wem,2022)
ceg_fun(scenario_wem,2022.5)
load_all()
ceg_fun(scenario_wem,2030)
