foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
scenario_params_df <- function(sD,yeartime){
#fast params
scen <- tibble::tibble(parameter="yeartime", value=  yeartime)
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_cost", value=  battery_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_install_cost", value=  battery_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_cost", value=  pv_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_install_cost", value=  pv_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price", value =  electricity_price_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price_inflation", value =  electricity_price_inflation_fun(sD,yeartime)))
#scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  ceg_price_inflation_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  0))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="standing_charge", value =  standing_charge_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg", value =  ceg_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_tax_threshold", value =  ceg_tax_threshold_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="marginal_tax_rate", value =  dplyr::filter(sD, parameter=="marginal_tax_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="finance_rate", value =  finance_rate_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="term_of_loan", value =  dplyr::filter(sD, parameter=="term_of_loan")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="discount_rate", value =  dplyr::filter(sD, parameter=="discount_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="system_lifetime", value =  dplyr::filter(sD, parameter=="system_lifetime")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_demand_factor", value =  electricity_demand_factor_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_threshold", value =  dplyr::filter(sD, parameter=="sol_upper_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_grant", value =  dplyr::filter(sD, parameter=="sol_lower_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_grant", value =  dplyr::filter(sD, parameter=="sol_upper_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_introduction_date", value =  dplyr::filter(sD, parameter=="grant_introduction_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_removal_date", value =  dplyr::filter(sD, parameter=="grant_removal_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_threshold", value =  dplyr::filter(sD, parameter=="bat_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_grant", value =  dplyr::filter(sD, parameter=="bat_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="self_sufficiency_effect", value =  self_sufficiency_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="kWp_per_m2", value =  kWp_per_m2_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="usable_roof_fraction", value =  dplyr::filter(sD, parameter=="usable_roof_fraction")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="mean_shading_factor", value =  dplyr::filter(sD, parameter=="mean_shading_factor")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="acceleration_factor", value =  acceleration_fun(sD,yeartime)))
return(scen)
#return(scen %>% pvmicrosimr::fast_params())
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
scenario_params_df <- function(sD,yeartime){
#fast params
scen <- tibble::tibble(parameter="yeartime", value=  yeartime)
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_cost", value=  battery_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_install_cost", value=  battery_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_cost", value=  pv_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_install_cost", value=  pv_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price", value =  electricity_price_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price_inflation", value =  electricity_price_inflation_fun(sD,yeartime)))
#scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  ceg_price_inflation_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  0))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="standing_charge", value =  standing_charge_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg", value =  ceg_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_tax_threshold", value =  ceg_tax_threshold_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="marginal_tax_rate", value =  dplyr::filter(sD, parameter=="marginal_tax_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="finance_rate", value =  finance_rate_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="term_of_loan", value =  dplyr::filter(sD, parameter=="term_of_loan")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="discount_rate", value =  dplyr::filter(sD, parameter=="discount_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="system_lifetime", value =  dplyr::filter(sD, parameter=="system_lifetime")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_demand_factor", value =  electricity_demand_factor_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_threshold", value =  dplyr::filter(sD, parameter=="sol_upper_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_grant", value =  dplyr::filter(sD, parameter=="sol_lower_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_grant", value =  dplyr::filter(sD, parameter=="sol_upper_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_introduction_date", value =  dplyr::filter(sD, parameter=="grant_introduction_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_removal_date", value =  dplyr::filter(sD, parameter=="grant_removal_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_threshold", value =  dplyr::filter(sD, parameter=="bat_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_grant", value =  dplyr::filter(sD, parameter=="bat_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="self_sufficiency_effect", value =  self_sufficiency_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="kWp_per_m2", value =  kWp_per_m2_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="usable_roof_fraction", value =  dplyr::filter(sD, parameter=="usable_roof_fraction")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="mean_shading_factor", value =  dplyr::filter(sD, parameter=="mean_shading_factor")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="acceleration_factor", value =  acceleration_fun(sD,yeartime)))
#return(scen)
return(scen %>% pvmicrosimr::fast_params())
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
load_all()
load_all()
#randomiise ICEV emissions assignment
#choose segments
# params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#  scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
#
load_all()
rm(list = c("scenario_params_df"))
load_all()
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
scenario_params_df <- function(sD,yeartime){
#fast params
scen <- tibble::tibble(parameter="yeartime", value=  yeartime)
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_cost", value=  battery_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_install_cost", value=  battery_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_cost", value=  pv_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_install_cost", value=  pv_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price", value =  electricity_price_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price_inflation", value =  electricity_price_inflation_fun(sD,yeartime)))
#scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  ceg_price_inflation_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  0))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="standing_charge", value =  standing_charge_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg", value =  ceg_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_tax_threshold", value =  ceg_tax_threshold_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="marginal_tax_rate", value =  dplyr::filter(sD, parameter=="marginal_tax_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="finance_rate", value =  finance_rate_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="term_of_loan", value =  dplyr::filter(sD, parameter=="term_of_loan")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="discount_rate", value =  dplyr::filter(sD, parameter=="discount_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="system_lifetime", value =  dplyr::filter(sD, parameter=="system_lifetime")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_demand_factor", value =  electricity_demand_factor_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_threshold", value =  dplyr::filter(sD, parameter=="sol_upper_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_grant", value =  dplyr::filter(sD, parameter=="sol_lower_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_grant", value =  dplyr::filter(sD, parameter=="sol_upper_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_introduction_date", value =  dplyr::filter(sD, parameter=="grant_introduction_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_removal_date", value =  dplyr::filter(sD, parameter=="grant_removal_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_threshold", value =  dplyr::filter(sD, parameter=="bat_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_grant", value =  dplyr::filter(sD, parameter=="bat_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="self_sufficiency_effect", value =  self_sufficiency_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="kWp_per_m2", value =  kWp_per_m2_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="usable_roof_fraction", value =  dplyr::filter(sD, parameter=="usable_roof_fraction")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="mean_shading_factor", value =  dplyr::filter(sD, parameter=="mean_shading_factor")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="acceleration_factor", value =  acceleration_fun(sD,yeartime)))
#return(scen)
return(scen %>% pvmicrosimr::fast_params())
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
load_all()
load_all()
rm(list = c("scenario_params_df"))
load_all()
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
scenario_params_df <- function(sD,yeartime){
#fast params
scen <- tibble::tibble(parameter="yeartime", value=  yeartime)
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_cost", value=  pvmicrosimr::battery_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="battery_install_cost", value=  pvmicrosimr::battery_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_cost", value=  pvmicrosimr::pv_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="pv_install_cost", value=  pvmicrosimr::pv_install_cost_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price", value =  pvmicrosimr::electricity_price_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_price_inflation", value =  pvmicrosimr::electricity_price_inflation_fun(sD,yeartime)))
#scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  ceg_price_inflation_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_price_inflation", value =  0))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="standing_charge", value =  pvmicrosimr::standing_charge_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg", value =  pvmicrosimr::ceg_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="ceg_tax_threshold", value =  pvmicrosimr::ceg_tax_threshold_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="marginal_tax_rate", value =  dplyr::filter(sD, parameter=="marginal_tax_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="finance_rate", value =  pvmicrosimr::finance_rate_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="term_of_loan", value =  dplyr::filter(sD, parameter=="term_of_loan")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="discount_rate", value =  dplyr::filter(sD, parameter=="discount_rate")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="system_lifetime", value =  dplyr::filter(sD, parameter=="system_lifetime")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="e_demand_factor", value =  pvmicrosimr::electricity_demand_factor_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_threshold", value =  dplyr::filter(sD, parameter=="sol_upper_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_grant", value =  dplyr::filter(sD, parameter=="sol_lower_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_upper_grant", value =  dplyr::filter(sD, parameter=="sol_upper_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="sol_lower_threshold", value =  dplyr::filter(sD, parameter=="sol_lower_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_introduction_date", value =  dplyr::filter(sD, parameter=="grant_introduction_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="grant_removal_date", value =  dplyr::filter(sD, parameter=="grant_removal_date")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_threshold", value =  dplyr::filter(sD, parameter=="bat_threshold")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="bat_grant", value =  dplyr::filter(sD, parameter=="bat_grant")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="self_sufficiency_effect", value =  pvmicrosimr::self_sufficiency_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="kWp_per_m2", value =  pvmicrosimr::kWp_per_m2_fun(sD,yeartime)))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="usable_roof_fraction", value =  dplyr::filter(sD, parameter=="usable_roof_fraction")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="mean_shading_factor", value =  dplyr::filter(sD, parameter=="mean_shading_factor")$value))
scen <- dplyr::bind_rows(scen,tibble::tibble(parameter="acceleration_factor", value =  pvmicrosimr::acceleration_fun(sD,yeartime)))
#return(scen)
return(scen %>% pvmicrosimr::fast_params())
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
runABM(scenario_wem,8,2030)
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#abm <- foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4")) %dopar% {
#randomiise ICEV emissions assignment
#choose segments
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
#agents_in <- pvmicrosimr::initialise_agents(pvmicrosimr::agents_init,year_zero)
}
pvmicrosimr::empirical_utils
load_all()
rm(list = c("scenario_params_df"))
load_all()
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
yeartime
yeartime <- 2020
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
#params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + i
params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
foreach::foreach(j = 1:Nrun, .combine=dplyr::bind_rows,.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
scenario_params_df(scenario_wem,2020)
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
approx(c(1,2,3),c(5,3,4,4),2.5)
load_all()
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
params$yeartime
load_all()
load_all()
params <- scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
params
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#params <- pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
scenario_params_df
scenario_params_df(scenario_wem,2020)
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
library(devtools)
load_all()
load_all()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
load_all()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
stopCluster(cl)
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
doParallel::stopCluster(cl)
doParallel::stopCluster(cl)
doParallel::stopImplicitCluster(cl)
doParallel::stopImplicitCluster()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
doParallel::stopImplicitCluster()
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
doParallel::stopImplicitCluster()
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
doParallel::stopImplicitCluster()
seai_elec
doParallel::stopImplicitCluster()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass",.export = c("initialise_agents","update_agents4","make_artificial_society")) %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
doParallel::stopImplicitCluster()
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
yeartime <- 2020
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#scenario_wem
}
doParallel::stopImplicitCluster()
rm(seai_elec)
seai_elec
rm(seai_elec)
seai_elec <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/electricity_household_demand_price_SEAI.csv")
seai_elec <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/electricity_household_demand_price_SEAI.csv")
use_data(seai_elec,overwrite = T)
seai_elec
rm(seai_elec)
load_all()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
doParallel::stopImplicitCluster()
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
scenario_wem
}
doParallel::stopImplicitCluster()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
pvmicrosimr::scenario_wem
}
doParallel::stopImplicitCluster()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#pvmicrosimr::scenario_wem
}
doParallel::stopImplicitCluster()
load_all()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#pvmicrosimr::scenario_wem
}
doParallel::stopImplicitCluster()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
#pvmicrosimr::scenario_wem
}
doParallel::stopImplicitCluster()
pvmicrosimr::seai_elec
help(seai_elec)
seai_elec1$year+0.5
seai_elec1 <- pvmicrosimr::seai_elec %>% dplyr::filter(year >=2008) #add more costs here if known
sD <- scenario_wem
cost_2022 <- sD %>% dplyr::filter(parameter=="electricity_price_2022") %>% dplyr::pull(value)
cost_2030 <- sD %>% dplyr::filter(parameter=="electricity_price_2030") %>% dplyr::pull(value)
cost_2050 <- sD %>% dplyr::filter(parameter=="electricity_price_2050") %>% dplyr::pull(value)
cost_2022
c(seai_elec1$year+0.5,2022.5,2030.5,2050.5)
seai_elec1$price/100
seai_elec1
rm(scenario_params_df())
rm(scenario_params_df)
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
electricity_price_fun(pvmicrosimr::scenario_wem,yeartime)
#pvmicrosimr::scenario_wem
}
doParallel::stopImplicitCluster()
number_of_cores <- parallel::detectCores() - 2
doParallel::registerDoParallel(number_of_cores)
Nrun <- 8
foreach::foreach(j = 1:Nrun, .errorhandling = "pass") %dopar% {
yeartime <- 2010 + j
#tibble::tibble(parameter="yeartime", value=  yeartime)
#pvmicrosimr::scenario_params_df(pvmicrosimr::scenario_wem,yeartime)
pvmicrosimr::electricity_price_fun(pvmicrosimr::scenario_wem,yeartime)
#pvmicrosimr::scenario_wem
}
doParallel::stopImplicitCluster()
load_all()
load_all()
document()
check()
load_all()
document()
check()
install()
library(roxygen2)
sessionInfo()
