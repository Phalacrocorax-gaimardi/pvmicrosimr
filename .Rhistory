agents_in
agents <- agents_init
#initialise to 2010
params <- scenario_params_df(scenario_wem,yeartime) %>% fast_params()
test <- map_survey_to_cer(params,lambda)
#owner occupier non-apartment
test <- test %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
test$ID <- 1:dim(test)[1]
agents <- agents %>% dplyr::inner_join(test %>% dplyr::select(ID,housecode,qc1,region))
#housing type
agents <- agents  %>% dplyr::rowwise() %>% dplyr::mutate(house_type=is_bungalow(qc1,region))
agents
#initialise to 2010
params <- scenario_params_df(scenario_wem,yeartime) %>% fast_params()
test <- map_survey_to_cer(params,lambda)
#owner occupier non-apartment
test <- test %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
test$ID <- 1:dim(test)[1]
agents <- agents %>% dplyr::inner_join(test %>% dplyr::select(ID,housecode,qc1,region)) %>% select(-qc1,-region)
#initialise to 2010
params <- scenario_params_df(scenario_wem,yeartime) %>% fast_params()
test <- map_survey_to_cer(params,lambda)
#owner occupier non-apartment
test <- test %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
test$ID <- 1:dim(test)[1]
agents <- agents %>% dplyr::inner_join(test %>% dplyr::select(ID,housecode,qc1,region))
#housing type
agents <- agents  %>% dplyr::rowwise() %>% dplyr::mutate(house_type=is_bungalow(qc1,region))
agents <- agents %>% dplyr::select(-qc1,-region)
#
agents <- agents %>% dplyr::inner_join(cer_demand)
#
agents <- agents %>% dplyr::inner_join(cer_demand)
agents <- agents  %>% dplyr::rowwise() %>% dplyr::mutate(roof_capacity=get_rooftop_solar_potential(house_type,demand))
agents <- agents %>% dplyr::rowwise() %>% dplyr::mutate(aspect=sample(c("South-North","SW-NE","SE-NW","East-West"),size=1))
agents
agents <- agents[,c(1,7:8,11,9:10,2:6)]
agents
#initialise to 2010
params <- scenario_params_df(scenario_wem,yeartime) %>% fast_params()
test <- map_survey_to_cer(params,lambda)
#owner occupier non-apartment
test <- test %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
test$ID <- 1:dim(test)[1]
agents <- agents %>% dplyr::inner_join(test %>% dplyr::select(ID,housecode,qc1,region))
dim(agents)
test <- map_survey_to_cer(params,lambda)
dim(test)
#owner occupier non-apartment
test <- test %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
dim(test)
#owner occupier non-apartment
#test <- test %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
test$ID <- 1:dim(test)[1]
agents <- agents_init
agents <- agents %>% dplyr::inner_join(test %>% dplyr::select(ID,housecode,qc1,region))
#housing type
agents <- agents  %>% dplyr::rowwise() %>% dplyr::mutate(house_type=is_bungalow(qc1,region))
agents <- agents %>% dplyr::select(-qc1,-region)
#
agents <- agents %>% dplyr::inner_join(cer_demand)
agents <- agents  %>% dplyr::rowwise() %>% dplyr::mutate(roof_capacity=get_rooftop_solar_potential(house_type,demand))
agents <- agents %>% dplyr::rowwise() %>% dplyr::mutate(aspect=sample(c("South-North","SW-NE","SE-NW","East-West"),size=1))
agents <- agents[,c(1,7:8,11,9:10,2:6)]
agents
load_all()
agents_in <- initialise_agents(agents_init,2010)
agents_in
agents_in %>% dim()
#initialise to 2010
params <- scenario_params_df(scenario_wem,yeartime) %>% fast_params()
test <- map_survey_to_cer(params,lambda)
#
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#params at yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
yeartime
yeartime <- 2020
#params at yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
#self-sufficiency
averse <- c(0,0,0,aversion_4.,aversion_5.)*params$self_sufficiency_effect
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
b_s <- b_s %>% dplyr::left_join(cer_systems,by=c("housecode"="housecode","aspect"="aspect","old_solar1"="solar1","old_solar2"="solar2","old_battery"="battery"))
b_s
names(b_s)
cer_systems
a_s
b_s
colnames(b_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_s
col_names(b_s)
colnames(b_s)
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
b_s <- b_s %>% dplyr::left_join(cer_systems)
b_s
b_s %>% colnames()
#new system is an enhancement
b_s <- b_s %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
b_s
#new system is an enhancement
b_s <- b_s %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
cer_sys <- cer_sys %>% dplyr::rename("ne_imports"=imports,"old_exports"=exports)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
b_s
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
dim(cer_sys)
dim(b_s)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
dim(cer_sys)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
dim(cer_sys)
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery)
cer_sys_opt$new_solar1
cer_sys_opt$old_solar1
cer_sys_opt$old_solar2
cer_sys_opt$new_solar2
b_s[5,]
cer_sys_opt$new_battery
cer_sys_opt$old_battery
cer_sys_opt$aspect
cer_sys_opt$new_solar1
b_s
cer_sys_opt
cer_sys_opt %>% colnames()
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
cer_sys_opt
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
get_sys_optimal(params,b_s)
get_sys_optimal(params,b_s)$old_solar1
test <- get_sys_optimal(params,b_s)
test$old_solar1
test$old_solar2
test$new_solar2
test$new_solar1
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
test <- get_sys_optimal(params,b_s)
test %>% filter(new_solar2 > new_solar1)
test %>% dplyr::filter(new_solar2 > new_solar1)
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
test <- get_sys_optimal(params,b_s)
test %>% dplyr::filter(new_solar2 > new_solar1)
test %>% dplyr::filter(new_solar2 > new_solar1) %>% pull(new_solar1)
test %>% dplyr::filter(new_solar2 > new_solar1) %>% dplyr::pull(new_solar1)
test %>% dplyr::filter(new_solar2 > new_solar1) %>% dplyr::pull(new_solar2)
test %>% dplyr::filter(new_solar2 > new_solar1) %>% dplyr::pull(new_solar2,new_solar1)
names(test)
dim(test)
names(a_s)
agents_in
agents_in %>% colnames()
agents_in %>% colnames() %>% length()
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt %>% select(-du))
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#params at yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
#self-sufficiency
averse <- c(0,0,0,aversion_4.,aversion_5.)*params$self_sufficiency_effect
#parameters from scenario corresponding to yeartime
a_s <- agents_in
#a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt %>% dplyr::select(-du))
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
system.time(get_sys_optimal(params,b_s))
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
b_s1
b_s1 %>% colnames()
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar_2==0)~w_qsp21*du_social[qsp21]))
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_qsp21*du_social[qsp21]))
#+lambda. or +w_theta*lambda.?
b_s1 <- b_s1 %>% dplyr::mutate(du_theta = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_theta*theta+ lambda.))
lambda. <- 0.1
#+lambda. or +w_theta*lambda.?
b_s1 <- b_s1 %>% dplyr::mutate(du_theta = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_theta*theta+ lambda.))
b_s1 <- b_s1 %>% dplyr::mutate(du_tot = du_fin+du_social+du_theta)
#some agents do not transact even when du_fin > 0
b_s_transact <- b_s1 %>% dplyr::filter(du_tot > 0)
b_s_notransact <- b_s1 %>% dplyr::filter(du_tot <= 0)
b_s_transact$transaction <- T
b_s_notransact$transaction <- F
b_s_transact
b_s_transact$new_solar2
b_s_transact$new_solar1
b_s_transact$old_solar1
b_s_transact$old_solar2
b_s_notransact
b_s_notransact$new_solar1
b_s_notransact$old_solar1
b_s1$du_tot
b_s1 %>% names()
b_s1$du_fin
b_s1$du
#this line reverses transactions that would occur of du were only term
b_s_notransact <- b_s_notransact %>% dplyr::mutate(new_solar1=old_solar1,new_solar2=old_solar2,new_battery=old_battery)
#
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#params at yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
#self-sufficiency
averse <- c(0,0,0,aversion_4.,aversion_5.)*params$self_sufficiency_effect
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,roof_capacity,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= roof_capacity,solar1 >= old_solar1, solar2 <= roof_capacity, solar2 >= old_solar2, battery >= old_battery)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_qsp21*du_social[qsp21]))
#+lambda. or +w_theta*lambda.?
b_s1 <- b_s1 %>% dplyr::mutate(du_theta = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_theta*theta+ lambda.))
b_s1 <- b_s1 %>% dplyr::mutate(du_tot = du_fin+du_social+du_theta)
#some agents do not transact even when du_fin > 0
b_s_transact <- b_s1 %>% dplyr::filter(du_tot > 0)
b_s_notransact <- b_s1 %>% dplyr::filter(du_tot <= 0)
b_s_transact$transaction <- T
b_s_notransact$transaction <- F
#this line reverses transactions that would occur of du were only term
b_s_notransact <- b_s_notransact %>% dplyr::mutate(new_solar1=old_solar1,new_solar2=old_solar2,new_battery=old_battery)
#b_s <- update_cars(b_s,params)
#
a_s <- dplyr::filter(a_s, !(ID %in% c(b_s_notransact$ID,b_s_transact$ID)))
a_s <- dplyr::bind_rows(a_s,b_s_notransact,b_s_transact) %>% dplyr::arrange(as.numeric(ID))
a_s <- a_s %>% dplyr::mutate(new_solar = tidyr::replace_na(new_solar,0), new_battery = tidyr::replace_na(new_battery,0))
a_s <- a_s %>% dplyr::mutate(new_solar1 = tidyr::replace_na(new_solar1,0), new_solar2 = tidyr::replace_na(new_solar2,0),new_battery = tidyr::replace_na(new_battery,0))
#recompute social variable
ma <- igraph::get.adjacency(social_network)
g <- social_network %>% tidygraph::activate(nodes) %>% dplyr::left_join(a_s,by="ID")
#social network conformity effect
#
#fossil_nodes  <- igraph::V(g)$fuel == "fossil"
#adopter_nodes <- igraph::V(g)$old_solar == 0 & igraph::V(g)$new_solar > 0
adopter_nodes <- igraph::V(g)$new_solar > 0
a_s$qsp21 <- as.numeric(ma %*% adopter_nodes) #social reinforcement
#social network conformity effect
#
#fossil_nodes  <- igraph::V(g)$fuel == "fossil"
#adopter_nodes <- igraph::V(g)$old_solar == 0 & igraph::V(g)$new_solar > 0
adopter_nodes <- igraph::V(g)$new_solar1 > 0 || igraph::V(g)$new_solar2 > 0
a_s$qsp21 <- as.numeric(ma %*% adopter_nodes) #social reinforcement
adopter_nodes
igraph::V(g)$new_solar1 > 0
igraph::V(g)$new_solar1 > 0 || igraph::V(g)$new_solar2 > 0
igraph::V(g)$new_solar1 > 0 | igraph::V(g)$new_solar2 > 0
#social network conformity effect
#
#fossil_nodes  <- igraph::V(g)$fuel == "fossil"
#adopter_nodes <- igraph::V(g)$old_solar == 0 & igraph::V(g)$new_solar > 0
adopter_nodes <- igraph::V(g)$new_solar1 > 0 | igraph::V(g)$new_solar2 > 0
a_s$qsp21 <- as.numeric(ma %*% adopter_nodes) #social reinforcement
print(paste("time", round(yeartime,1),"PV system adopters",dim(agents_out %>% dplyr::filter(new_solar1 > 0 & old_solar1==0) || new_solar2 > 0 & old_solar2==0))[1]))
agents_out
a_s <- a_s %>% dplyr::rowwise() %>% dplyr::mutate(qsp21 = min(qsp21+1,3)) #qsp21 encoding 1,2,3
agents_out <- a_s
agents_out
agents_out %>% filter(transaction)
a_s %>% colnames()
agents_out %>% dplyr::filter(transaction)
a_s %>% dplyr::filter(new_solar1 > 0 & old_solar1==0) || new_solar2 > 0 & old_solar2==0))
a_s %>% dplyr::filter(new_solar1 > 0 & old_solar1==0) || new_solar2 > 0 & old_solar2==0)
a_s %>% dplyr::filter( (new_solar1 > 0 & old_solar1==0) || (new_solar2 > 0 & old_solar2==0))
#agents_out <- a_s
print(paste("time", round(yeartime,1), "PV system adopters",dim(a_s %>% dplyr::filter( (new_solar1 > 0 & old_solar1==0) || (new_solar2 > 0 & old_solar2==0)))[1]))
dim(a_s)
a_s
names(a_s)
agents_in
agents_in %>% names()
a_s
agents_in %>% names()
a_s %>% names()
#agents_out <- a_s
a_s <- a_s %>% dplyr::select(-du,-du_fin,-du_social,-du_theta,-du_tot)
dim(a_s)
print(paste("time", round(yeartime,1), "PV system adopters",dim(a_s %>% dplyr::filter( (new_solar1 > 0 & old_solar1==0) || (new_solar2 > 0 & old_solar2==0)))[1]))
print(paste("PV system augmentors",dim(a_s %>% dplyr::filter((old_solar1 > 0 & new_solar1 > old_solar1) || (old_solar2 > 0 & new_solar2 > old_solar2) || (old_solar1 > 0 & new_battery > old_battery) || (old_solar2 > 0 & new_battery > old_battery) ))[1]))
load_all()
document()
check()
cer_systems
load_all()
document()
check()
help(get_sys_util_0)
test <- runABM(scenario_wem,4,2030)
help(is_bungalow)
load_all()
check()
test <- runABM(scenario_wem,4,2030,use_parallel = F)
test <- runABM(scenario_wem,4,2030,use_parallel = T)
install()
load_all()
document()
check()
install()
build_readme()
cer_systems
cer_systems$solar1 %>% range()
cer_systems$battery %>% range()
cer_systems %>% dim()
cer_systems %>% dim()/1e+6
cer_systems
cer_systems %>% filter(solar1 < 15,solar2 <15, battery < 15)
cer_systems %>% dplyr::filter(solar1 < 15,solar2 <15, battery < 15)
test <- initialise_agents(agents_init,2010)
test
test$roof_capacity
test$roof_capacity %>% range()
test <- initialise_agents(agents_init,2010)
test$roof_capacity %>% range()
test <- initialise_agents(agents_init,2010)
test$roof_capacity %>% range()
test$roof_capacity %>% hist()
test <- initialise_agents(agents_init,2010)
test$roof_capacity %>% hist()
cer_systems
15/25
(15/25)^2
0.36*200
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
beta <- 0.2
beta. <- 0.2
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when((old_solar1 > 0 || old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_qsp21*du_social[qsp21]))
b_s1
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du-averse[q9_1])
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when((old_solar1 > 0 | old_solar2 > 0)~0,(old_solar1==0 & old_solar2==0)~w_qsp21*du_social[qsp21]))
b_s1
cer_systems <- cer_systems %>% filter(solar1 > 10 & round(solar1)==solar1 | solar1 <=10,solar2 > 10 & round(solar1)==solar2 | solar2 <= 10)
cer_systems <- cer_systems %>% dplyr::filter(solar1 > 10 & round(solar1)==solar1 | solar1 <=10,solar2 > 10 & round(solar1)==solar2 | solar2 <= 10)
use_data(cer_systems,overwrite = T)
cer_systems<- read_csv("~/Policy/AgentBasedModels/solarPV/cer_system_data.csv")
cer_systems<- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_system_data.csv")
cer_systems <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems.csv")
cer_systems
cer_systems <- cer_systems %>% dplyr::filter(solar1 > 15 & round(solar1)==solar1 | solar1 <=15,solar2 > 15 & round(solar1)==solar2 | solar2 <= 15)
cer_systems$solar1 %>% unique()
use_data(cer_systems,overwrite = T)
cer_systems <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems.csv")
cer_systems <- cer_systems %>% dplyr::filter(solar1 > 13 & round(solar1)==solar1 | solar1 <=13,solar2 > 13 & round(solar1)==solar2 | solar2 <= 13)
use_data(cer_systems,overwrite = T)
readr::write_csv(cer_systems,"~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems_reduced.csv")
load_all()
document()
check()
install()
build_readme()
install()
load_all()
document()
check()
install()
library(devtools)
install()
