a_s <- agents_in
a_s$transaction <- F
kWpm2
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.*params$acceleration_factor))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,area1,area2,shading1,shading2,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
dim(cer_sys)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
dim(cer_sys)
cer_sys$solar1%>% range()
cer_systems
cer_sys
cer_systems
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- cer_systems %>% right_join(b_s %>% select(housecode, aspect,shading1,shading2))
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- cer_systems %>% dplyr::right_join(b_s %>% select(housecode, aspect,shading1,shading2))
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- cer_systems %>% dplyr::right_join(b_s %>% dplyr::select(housecode, aspect,shading1,shading2))
cer_sys
cer_sys %>% dim()
dim(b_s)
cer_sys %>% dim()/6
cer_sys$housecode %>% unique()
cer_sys$aspect %>% unique()
cer_sys
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
sol_vals1 <- shading1*sol_vals
sol_vals2 <- shading2*sol_vals
er_sys
cer_sys
cer_sys$housecode %>% unique()
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% group_by(housecode,battery) %>% mutate(imports_eff = interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = interp2(x=sol_vals1,
y=sol_vals2,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals1,
y=sol_vals2,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals1,
y=sol_vals2,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys)
}
test <- get_shaded_sys(cer_sys)
warnings()
cer_systems <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems.csv")
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::select(housecode, aspect,shading1,shading2) %>% left_join(cer_systems)
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::select(housecode, aspect,shading1,shading2) %>% dplyr::left_join(cer_systems)
test <- get_shaded_sys(cer_sys)
test
test %>% filter(solar1==5,solar2==0,battery==0)
test %>% dplyr::filter(solar1==5,solar2==0,battery==0)
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports_eff = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys %>% dplyr::select(-solar1_eff,-solar2_eff))
}
test %>% dplyr::filter(solar1==5,solar2==0,battery==0)
test <- get_shaded_sys(cer_sys)
test %>% dplyr::filter(solar1==5,solar2==0,battery==0)
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% summarise(mean(imports_eff/imports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(imports_eff/imports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(exportss_eff/exports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(exports_eff/exports))
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% dplyr::summarise(mean(exports_eff/exports))
test
test %>% dplyr::filter(solar1==5,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,imports_eff))+ggplot2::geom_point()
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% dplyr::summarise(mean(exports_eff/exports))
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,imports_eff))+ggplot2::geom_point()
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,imports_eff/imports))+ggplot2::geom_point()
test %>% dplyr::filter(solar1==15,solar2==0,battery==0) %>% ggplot2::ggplot(ggplot2::aes(shading1,exports_eff/exports))+ggplot2::geom_point()
get_shaded_sys <- function(cer_sys){
#returns a table of imports and exports for a shaded roof
#cer_sys_red <- cer_systems %>% filter(housecode==1036, aspect=="South-North") %>% select(housecode,demand,aspect,solar1,solar2,battery,imports,exports)
sol_vals <- cer_sys$solar1 %>% unique() %>% sort()
#cer_sys_red <- cer_sys_red %>% inner_join(capacity_factors)
#cer_sys_red$roof1 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof1)
#cer_sys_red$roof2 <- capacity_factors %>% filter(aspect==orientation) %>% pull(roof2)
cer_sys <- cer_sys %>% dplyr::mutate(solar1_eff=shading1*solar1,solar2_eff=shading2*solar2)
#cer_sys_red <- cer_sys_red %>% mutate(pv_shade = (shading1*solar1*roof1 + shading2*solar2*roof2)*8760)
#cer_sys_red <- cer_sys_red %>% mutate(diff=pv+imports-demand-exports)
#sol_vals1 <- shading1*sol_vals
#sol_vals2 <- shading2*sol_vals
cer_sys <- cer_sys %>% dplyr::group_by(housecode,battery) %>% dplyr::mutate(imports = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(imports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"),
exports = pracma::interp2(x=sol_vals,
y=sol_vals,
Z=matrix(exports,length(sol_vals),length(sol_vals)),
xp=solar1_eff,
yp=solar2_eff, method="linear"))
return(cer_sys %>% dplyr::select(-solar1_eff,-solar2_eff))
}
test <- get_shaded_sys(cer_sys)
test
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::select(housecode, aspect,shading1,shading2) %>% dplyr::left_join(cer_systems)
cer_sys <- get_shaded_sys(cer_sys)
cer_sys
b_s
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
cer_sys <- get_shaded_sys(cer_sys)
cer_sys
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
test <- get_cer_sys_optimal(params,b_s)
test <- get_sys_optimal(params,b_s)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(cer_systems)
cer_sys <- get_shaded_sys(cer_sys)
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::mutate(area1 = area1 - (solar1-old_solar1)/kWpm2, area2 = area2 - (solar2-old_solar2)/kWpm2)
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
test <- get_sys_optimal(params,b_s)
test
cer_systems1 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems1.csv")
cer_systems2 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems2.csv")
cer_systems3 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems3.csv")
cer_systems4 <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_systems4.csv")
use_data(cer_systems1,version = 3)
use_data(cer_systems2,version = 3)
use_data(cer_systems3,version = 3)
use_data(cer_systems4,version = 3)
cer_systems <- bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4)
cer_systems <- dplyr::bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4)
dim(cer_systems)
load_all()
cer_systems1
document()
warnings()
check()
cer_systems1
rm(cer_systems1)
rm(cer_systems2)
rm(cer_systems3)
rm(cer_systems4)
rm(cer_systems)
cer_systems
rm(cer_systems)
cer_systems
cer_systems1
load_all()
help(cer_systems1)
cer_systems1
cer_systems
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
params <- scenario_params_df(scenario_wem,2023)
seai_grant(params,10,0)
seai_grant(params,10,5)
cer_systems2
cer_systems1
cer_systems1
cer_systems1
cer_systems2
cer_systems1
cer_systems2
cer_systems4
cer_systems4 %>% filter(house==1036)
cer_systems4 %>% filter(housecode==1036)
cer_systems4 %>% dplyr::filter(housecode==1036)
cer_systems4 %>% dplyr::filter(housecode==1036, solar1==5,solar2==5,battery==0)
load_all()
load_all()
load_all()
load_all()
document()
check()
install()
load_all()
library(devtools)
load_all()
document()
check()
install()
ceg_fin(scenario_wem,2010)
ceg_fin(scenario_wem,2010)
ceg_fun(scenario_wem,2010)
ceg_fun(scenario_wem,2015)
ceg_fun(scenario_wem,2022)
ceg_fun(scenario_wem,2022.5)
load_all()
ceg_fun(scenario_wem,2030)
library(devtools)
load_all()
document()
document()
help(get_shaded_sys)
document()
help(get_shaded_sys)
check()
install()
library(devtools)
df <- tibble(rand=rand(759))
df <- tibble::tibble(rand=rand(759))
df <- tibble::tibble(rand=runif(759))
df
df %>% dplyr::slice_sample(6)
load_all()
df %>% dplyr::slice_sample(6)
df %>% dplyr::slice_sample(n=6)
df %>% dplyr::slice_sample(n=2.5)
df %>% dplyr::slice_sample(n=2.5)
df %>% dplyr::slice_sample(n=2.5)
roundr <- function(x){  x1 <- round(x); x2 <- trunc(x)}
trunc(2.5)
roundr <- function(x){  x1 <- round(x); x2 <- x1+1; weights = c(x-x1,x2-x)}
roundr <- function(x){  x1 <- round(x); x2 <- x1+1; weights = c(x-x1,x2-x); return(weights)}
weights
roundr <- function(x){  x1 <- round(x); x2 <- x1+1; weights = c(x-x1,x2-x); return(weights)}
roundr(2)
roundr(2.5)
roundr <- function(x){  x1 <- round(x); x2 <- x1+1; weights = c(1-x+x1,1-x2+x); return(weights)}
roundr(2.5)
roundr(2.1)
roundr(2.9)
roundr <- function(x){  x1 <- round(x); x2 <- x1+1; weights = c(1+x1-x,x-x1); return(weights)}
roundr(2.9)
trunc(2.1)
trunc(2.9)
roundr <- function(x){  x1 <- trunc(x); x2 <- x1+1; weights = c(1+x1-x,x-x1); return(weights)}
trunc(2.9)
roundr(2.9)
roundr(2.5)
roundr(2.1)
roundr(2.01)
roundr <- function(x){
x1 <- trunc(x)
weights = c(1+x1-x,x-x1)
return(sample(x1,x1+1,weights))}
roundr(6.6)
roundr <- function(x){
x1 <- trunc(x)
weights = c(1+x1-x,x-x1)
return(sample(c(x1,x1+1),size=1,prob=weights))}
roundr(2.4)
replicate(1000,roundr(2.333)) %>% table()
replicate(10000,roundr(2.333)) %>% table()
roundr(5.5)
roundr(5.5)
roundr(5.5)
load_all()
document()
check()
install()
library(tidyverse)
library(pvmicrosimr)
library(zoo)
#library(pvcalibrater)
library(lubridate)
library(ggthemes)
load_all()
library(devtools)
load_all()
agents_in <- initialise_agents(agents_inits,2010)
agents_init
agents_in <- initialise_agents(agents_init,2010)
social_network <- make_artificial_society(pv_society_oo,homophily)
sD <- scenario_wem
scenario_wem <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx", sheet="scenario_WEM")
use_data(scenario_wem,overwrite = T,version=3)
sD <- scenario_wem
yeartime <- 2045
#
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
empirical_u = empirical_utils
#
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#params at yeartime
params <- scenario_params_df(sD,yeartime)
#self-sufficiency
averse <- c(0,0,0,aversion_4.,aversion_5.)*params$self_sufficiency_effect
#parameters from scenario corresponding to yeartime
kWpm2 <- params$kWp_per_m2
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_imports=new_imports,old_exports=new_imports,old_solar1=new_solar1,old_solar2 = new_solar2,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=roundr(dim(a_s)[1]*p.*params$acceleration_factor))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,house_type,aspect,area1,area2,shading1,shading2,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_imports, old_exports,old_solar1,old_solar2,old_battery)
b_s
dim(a_s)[1]*p.*params$acceleration_factor
p.
kWpm2
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(dplyr::bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4))
dim(b_s)
dim(cer_sys)
dim(cer_sys)[1]/6
cer_sys$solar1 %>% unique()
cer_sys$solar1 %>% unique() %>% length()
cer_sys$battery %>% unique() %>% length()
cer_sys$battery %>% unique()
51^2*9
cer_sys
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= kWpm2*area1,solar1 >= old_solar1, solar2 <= kWpm2*area2, solar2 >= old_solar2, battery >= old_battery)
cer_sys
b_s
b_s[1,"old_solar1"]
b_s[1,"new_solar1"]
b_s[1,"old_solar1"]
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
cer_sys
cer_sys %>% dim()
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(dplyr::bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4))
cer_sys <- get_shaded_sys(cer_sys)
cer_sys
60*kWpm2
cer_sys$solar1 %>% unique()
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(dplyr::bind_rows(cer_systems1,cer_systems2,cer_systems3,cer_systems4))
cer_sys <- get_shaded_sys(cer_sys)
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
#area1,2 is the remaining area for solar
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= old_solar+kWpm2*area1,solar2 <= old_solar2+kWpm2*area2, battery >= old_battery)
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
#area1,2 is the remaining area for solar
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= old_solar1+kWpm2*area1,solar2 <= old_solar2+kWpm2*area2, battery >= old_battery)
dim(cer_sys)
dim(cer_sys)[1]/6
#add shading factors in financial utility!
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
system.time(cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
)
dim(cer_sys)
149.53/24210
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
#reduce available area by
cer_sys_opt <- cer_sys_opt %>% dplyr::mutate(area1 = area1 - (solar1-old_solar1)/kWpm2, area2 = area2 - (solar2-old_solar2)/kWpm2)
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar1=solar1,new_solar2 = solar2,new_battery=battery,new_imports=imports,new_exports=exports)
load_all()
document()
check()
install()
install()
