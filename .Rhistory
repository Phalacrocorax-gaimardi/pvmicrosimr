#choose market segment for each agent
agents_in <- initialise_agents(agents0,year_zero)
test1 <- runABM(sD,Nrun=4,simulation_end=2030,use_parallel = F)
load_all()
test1 <- runABM(sD,Nrun=4,simulation_end=2030,use_parallel = F)
test1 <- runABM(sD,Nrun=1,simulation_end=2025,use_parallel = F)
beta.
load_all()
test1 <- runABM(sD,Nrun=1,simulation_end=2012,use_parallel = F)
test1
test1[[1]]
test1[[1]] %>% group_by(t) %>% summarise(n=n())
test1[[1]] %>% group_by(t) %>% summarise(n=n())
library(tidyverse)
test1[[1]] %>% group_by(t) %>% summarise(n=n())
test1 <- runABM(sD,Nrun=1,simulation_end=2012,use_parallel = T)
test1 <- runABM(sD,Nrun=1,simulation_end=2011,use_parallel = T)
Nrun <- 1
agents_in <- initialise_agents(agents_init,2010)
social_network <- social
#calibration params
p. <- 0.05
lambda. <- 0.1
beta. <- 0.136
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#parameters from scenario corresponding to yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
empirical_u = empirical_utils
#calibration params
p. <- 0.05
lambda. <- 0.1
beta. <- 0.136
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
#parameters from scenario corresponding to yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
yeartime <- 2022
#parameters from scenario corresponding to yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_solar=new_solar,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_solar,old_battery,rooftop_capacity)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
cer_sys <- b_s %>% dplyr::left_join(cer_systems) %>% dplyr::filter(solar_capacity < rooftop_capacity)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,imports,exports,solar_capacity,battery_capacity))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar=solar_capacity,new_battery=battery_capacity)
return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#scale factor from calibration
b_s1 <- b_s1 %>% dplyr::mutate(du=beta.*du)
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
cer_sys <- b_s %>% dplyr::left_join(cer_systems) %>% dplyr::filter(solar_capacity < rooftop_capacity)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,imports,exports,solar_capacity,battery_capacity))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar=solar_capacity,new_battery=battery_capacity)
cer_sys_opt
b_s
cer_sys_opt
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
cer_sys <- b_s %>% dplyr::left_join(cer_systems) %>% dplyr::filter(solar_capacity < rooftop_capacity)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,imports,exports,solar_capacity,battery_capacity))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar=solar_capacity,new_battery=battery_capacity)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
#scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du)
b_s1 <- b_s1 %>% dplyr::mutate(du_social = dplyr::case_when(old_solar > 0~0,old_solar==0~w_qsp21*du_social[qsp21]))
b_s1 <- b_s1 %>% dplyr::mutate(du_theta = dplyr::case_when(old_solar > 0~0,old_solar==0~w_theta*theta+ lambda.))
b_s1 <- b_s1 %>% dplyr::mutate(du_tot = du_fin+du_social+du_theta)
#some agents do not transact even when du_fin > 0
b_s_transact <- b_s1 %>% dplyr::filter(du_tot > 0)
b_s_notransact <- b_s1 %>% dplyr::filter(du_tot <= 0)
b_s_transact$transaction <- T
b_s_notransact$transaction <- F
b_s_notransact <- b_s_notransact %>% dplyr::mutate(new_solar=old_solar,new_battery=old_battery)
b_s_notransact
b_s_transact
dim(b_s)
dim(b_s1)
dim(b_s_notransact)
dim(b_s_transact)
#b_s <- update_cars(b_s,params)
#
a_s <- dplyr::filter(a_s, !(ID %in% c(b_s_notransact$ID,b_s_transact$ID)))
a_s <- dplyr::bind_rows(a_s,b_s_notransact,b_s_transact) %>% dplyr::arrange(as.numeric(ID))
a_s <- a_s %>% dplyr::mutate(new_solar = tidyr::replace_na(new_solar,0), new_battery = tidyr::replace_na(new_battery,0))
#recompute social variable
ma <- igraph::get.adjacency(social_network)
ma
class(ma)
g <- social_network %>% tidygraph::activate(nodes) %>% dplyr::left_join(a_s,by="ID")
g
dim(a_s)
dim(g)
g
if(ignore_social) a_s$qsp21 <- 0 #no pvs assumed present in local network
a_s <- a_s %>% dplyr::rowwise() %>% dplyr::mutate(qsp21 = min(qsp21+1,3)) #qsp21 encoding 1,2,3
agents_out <- a_s
load_all()
test1 <- runABM(sD,Nrun=1,simulation_end=2012,use_parallel = T)
a_s
#social network conformity effect
#
#fossil_nodes  <- igraph::V(g)$fuel == "fossil"
#adopter_nodes <- igraph::V(g)$old_solar == 0 & igraph::V(g)$new_solar > 0
adopter_nodes <- igraph::V(g)$new_solar > 0
a_s$qsp21 <- as.numeric(ma %*% adopter_nodes) #social reinforcement
load_all()
test1 <- runABM(sD,Nrun=1,simulation_end=2012,use_parallel = T)
test1 <- runABM(sD,Nrun=1,simulation_end=2012,use_parallel = F)
test1
test1[[1]]
test1[[1]]$sqp21
test1[[1]]$qsp21
test1[[1]]$qsp21 %>% unique()
test1 <- runABM(sD,Nrun=1,simulation_end=2030,use_parallel = F)
test1[[1]] %>% group_by(t,simulation)
test1[[1]] %>% group_by(t,simulation) %>% summarise(q = mean(qsp21))
test1[[1]] %>% group_by(t,simulation) %>% summarise(q = mean(qsp21)) %>% tail()
test1[[1]] %>% group_by(t,simulation) %>% summarise(q = mean(qsp21)-1) %>% ggplot(aes(t,q))+geom_line()
test1[[1]] %>% group_by(t,simulation) %>% summarise(q = max(qsp21))
test1[[1]] %>% group_by(t,simulation) %>% summarise(q = max(qsp21)) %>% tail()
Nrun <- 1
use_parallel=T
ignore_social=F
n_unused_cores=2
#
year_zero <- 2010
#monthly runs
#Nt <- round((simulation_end-year_zero+1)*12)
#annual runs
Nt <- round((simulation_end-year_zero+1))
agents0 <- agents_init
u_empirical <- empirical_utils
simulation_end <- 2030
number_of_cores <- parallel::detectCores() - n_unused_cores
doParallel::registerDoParallel(number_of_cores)
#create a new artificial society for each run
print(paste("Generating network for run",j,"...."))
j
if(!resample_society) social <- make_artificial_society(pv_society_oo,homophily,4.5)
if(!resample_society) social <- make_artificial_society(pv_society_oo,homophily,5)
#randomiise ICEV emissions assignment
#choose segments
agents_in <- initialise_agents(agents0,year_zero)
#no transactions
agents_in$transaction <- FALSE
agent_ts<- vector("list",Nt)
agent_ts[[1]] <- agents_in #agent paraneters with regularized weights
#monthly runs
#Nt <- round((simulation_end-year_zero+1)*12)
#annual runs
Nt <- round((simulation_end-year_zero+1))
agent_ts<- vector("list",Nt)
agent_ts[[1]] <- agents_in #agent paraneters with regularized weights
for(t in seq(2,Nt)){
#
#yeartime <- year_zero+(t-1)/12
yeartime <- year_zero + (t-1)
agent_ts[[t]] <- update_agents4(sD,yeartime,agent_ts[[t-1]],social_network=social,ignore_social, empirical_u = u_empirical) #static social network, everything else static
#agent_ts[[t]] <- tibble::tibble(t=t)
}
test1 <- runABM(sD,Nrun=2,simulation_end = 2030)
test1 <- runABM(sD,Nrun=4,simulation_end = 2030)
social <- make_artificial_society(pv_society_oo,homophily,5)
social
#randomiise ICEV emissions assignment
#choose segments
agents_in <- initialise_agents(agents0,year_zero)
agents_in
update_agents4(sD,yeartime,agent_ts[[t-1]],social_network=social,ignore_social, empirical_u = u_empirical) #static social network, everything else static
update_agents4(sD,yeartime,agents_in,social_network=social,ignore_social, empirical_u = u_empirical) #static social network, everything else static
test <- update_agents4(sD,yeartime,agents_in,social_network=social,ignore_social, empirical_u = u_empirical) #static social network, everything else static
test
yeartime
yeartime <- 2030
test1 <- update_agents4(sD,yeartime,test,social_network=social,ignore_social, empirical_u = u_empirical) #static social network, everything else static
test1
test1 %>% filter(new_solar > 0)
test2 <- update_agents4(sD,yeartime,test1,social_network=social,ignore_social, empirical_u = u_empirical) #static social network, everything else static
test2 %>% filter(new_solar > 0)
test2 %>% filter(qsp21 > 0)
test2 %>% dplyr::filter(qsp21 > 0)
test2 %>% dplyr::filter(qsp21 > 1)
test2 %>% dplyr::filter(qsp21 > 1, new_solar > 0)
test2 %>% filter(new_solar > 0)
#social network conformity effect
#
#fossil_nodes  <- igraph::V(g)$fuel == "fossil"
#adopter_nodes <- igraph::V(g)$old_solar == 0 & igraph::V(g)$new_solar > 0
adopter_nodes <- igraph::V(g)$new_solar > 0
length(adopter_nodes)
a_s
#social network conformity effect
#
#fossil_nodes  <- igraph::V(g)$fuel == "fossil"
#adopter_nodes <- igraph::V(g)$old_solar == 0 & igraph::V(g)$new_solar > 0
adopter_nodes <- igraph::V(g)$new_solar > 0
a_s[adopter_nodes,]
ma
ma %>% sum()
3358/2
a_s$qsp21 <- as.numeric(ma %*% adopter_nodes) #social reinforcement
a_s$qsp21
a_s$qsp21 %>% range()
a_s$qsp21 %>% table()
a_s <- a_s %>% dplyr::rowwise() %>% dplyr::mutate(qsp21 = min(qsp21+1,3)) #qsp21 encoding 1,2,3
agents_out <- a_s
print(paste("time", round(yeartime,1),"PV system adopters",dim(agents_out %>% dplyr::filter(new_solar > 0 & old_solar==0))[1]))
print(paste("PV system augmentors",dim(agents_out %>% dplyr::filter((old_solar > 0 & new_solar > old_solar) || (old_solar > 0 & new_battery > old_battery)))[1]))
load_all()
test1 <- runABM(sD,Nrun=2,simulation_end = 2030)
test1
test1[[1]]
as.numeric(ma %*% adopter_nodes)
as.numeric(ma %*% adopter_nodes) %>% length()
load_all()
document()
check()
install()
load_all()
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
pv_society
#cer_systems<- read_csv("~/Policy/AgentBasedModels/solarPV/cer_system_data.csv")
#cer_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_survey.csv")
#cer_survey$floor_area_unit <- NULL
#cer_survey$housing_year <- NULL
#cer_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_questions.csv")
#cer_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_qanda.csv")
#pv_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_qanda.csv")
#pv_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/.csv")
#pv_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data.csv")
pv_survey_oo <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data_oo.csv")
#cer_systems<- read_csv("~/Policy/AgentBasedModels/solarPV/cer_system_data.csv")
#cer_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_survey.csv")
#cer_survey$floor_area_unit <- NULL
#cer_survey$housing_year <- NULL
#cer_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_questions.csv")
#cer_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_qanda.csv")
#pv_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_qanda.csv")
#pv_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/.csv")
#pv_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data.csv")
pv_survey_oo <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data_oo.csv")
#cer_systems<- read_csv("~/Policy/AgentBasedModels/solarPV/cer_system_data.csv")
#cer_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_survey.csv")
#cer_survey$floor_area_unit <- NULL
#cer_survey$housing_year <- NULL
#cer_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_questions.csv")
#cer_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_qanda.csv")
#pv_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_qanda.csv")
#pv_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/.csv")
#pv_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data.csv")
pv_survey_oo <- pv_survey %>% filter(q1 %in% 2:5,q3 %in% 1:2)
pv_survey
#cer_systems<- read_csv("~/Policy/AgentBasedModels/solarPV/cer_system_data.csv")
#cer_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_survey.csv")
#cer_survey$floor_area_unit <- NULL
#cer_survey$housing_year <- NULL
#cer_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_questions.csv")
#cer_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/cer_survey_reduced/cer_qanda.csv")
#pv_qanda <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_qanda.csv")
#pv_questions <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/.csv")
#pv_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data.csv")
pv_survey_oo <- pv_survey %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2)
use_data(pv_survey_oo)
pv_survey_oo
bills
bills_oo
params <- scenario_params_df(scenario_wem,2018.5)
params <- scenario_params_df(scenario_wem,2018.5) %>% fast_params()
test <- map_survey_to_cer(params)
test
test <- map_survey_to_cer(params)
test
load_all()
pv_survey
pv_survey <- read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data.csv")
pv_survey <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/Survey/pv_data.csv")
use_data(pv_survey)
use_data(pv_survey,overwrite = T)
pv_survey
pv_survey_oo
survey_raw <- readr::read_csv("~/Policy/AgentBasedModels/Survey/ESB Final data +LCA.csv")
#seai_elec %>% filter(year==2018)
#owner-occupier bills
#
bills_oo <- survey_raw %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2) %>% pull(q9_1) %>% na_if(9999)
load_all()
#seai_elec %>% filter(year==2018)
#owner-occupier bills
#
bills_oo <- survey_raw %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2) %>% pull(q9_1) %>% na_if(9999)
#seai_elec %>% filter(year==2018)
#owner-occupier bills
#
bills_oo <- survey_raw %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2) %>% pull(q9_1) %>% dplyr::na_if(9999)
#seai_elec %>% filter(year==2018)
#owner-occupier bills
#
bills_oo <- survey_raw %>% dplyr::filter(q1 %in% 2:5,q3 %in% 1:2) %>% dplyr::pull(q9_1) %>% dplyr::na_if(9999)
use_data(bill_oo,overwrite=T)
use_data(bills_oo,overwrite=T)
test <- map_survey_to_cer(params)
test
test$housecode %>% table()
bills
bills_oo
bills_oo %>% length()
bills
help(bills_oo)
bils_oo
bills_oo
help(bills_oo)
load_all()
document()
check()
load_all()
document()
check()
install()
library(devtools)
use_data(beta. = 0.0306,p.=0.01,lambda. = 0.1,internal=T)
beta = 0.0306
beta <- 0.0306
p. <- 0.01
lambda <- 0.1
# beta <- 0.0306
# p. <- 0.01
# lambda <- 0.1
use_data(beta.,p.,lambda.,overwrite=T,internal=T)
beta. <- 0.0306
p. <- 0.01
lambda <- 0.1
use_data(beta.,p.,lambda.,overwrite=T,internal=T)
lambda. <- 0.1
# beta. <- 0.0306
# p. <- 0.01
# lambda. <- 0.1
use_data(beta.,p.,lambda.,overwrite=T,internal=T)
load_all()
document()
check()
install()
beta. <- 0.0306
aversion_4 <- -0.007
aversion_5 <- -0.01
aversion_5. <- -0.01
aversion_4. <- -0.007
use_data(beta.,aversion_4.,aversion_5.,overwrite = T,internal=T)
averse <- c(0,0,0,aversion_4.,aversion_5.)
averse
scenario_wem %>% filter(parameter=="marginal_tax_rate")$value
scenario_wem %>% filter(parameter=="marginal_tax_rate") %>% pull(value)
scenario_wem %>% dplyr::filter(parameter=="marginal_tax_rate") %>% dplyr::pull(value)
sD <- scenario_wem
yeartime <- 2020
agents_in <- agents_init
social_network <- make_artificial_society(society,homophily)
pv_society_oo
social_network <- make_artificial_society(pv_society_oo,homophily)
ignore_social=F
empirical_u = empirical_utils
p. <- 0.01
lambda. <- 0.1
du_social <- dplyr::filter(empirical_u,code=="qsp21")$du_average
theta <- dplyr::filter(empirical_u,code=="theta")$du_average
averse <- c(0,0,0,aversion_4.,aversion_5.)
#parameters from scenario corresponding to yeartime
params <- scenario_params_df(sD,yeartime) %>% fast_params()
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_solar=new_solar,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s
agents_in <- initialise_agents(agents_init,2010)
a_s <- agents_in
a_s$transaction <- F
a_s <- dplyr::ungroup(a_s)
a_s <- a_s %>% dplyr::mutate(old_solar=new_solar,old_battery=new_battery)
#this subsample of agents decide to look at rooftop pv
b_s <- dplyr::slice_sample(a_s,n=round(dim(a_s)[1]*p.))
b_s <- b_s %>% dplyr::mutate(transaction=T) %>% dplyr::select(ID,housecode,w_q9_1,w_qsp21,w_theta,q9_1,qsp21,old_solar,old_battery,rooftop_capacity)
get_sys_optimal <- function(params, b_s){
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
cer_sys <- b_s %>% dplyr::left_join(cer_systems) %>% dplyr::filter(solar_capacity < rooftop_capacity)
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,imports,exports,solar_capacity,battery_capacity))
#optimal
cer_sys_opt <- cer_sys %>% dplyr::group_by(housecode) %>% dplyr::filter(du==max(du))
cer_sys_opt <- cer_sys_opt %>% dplyr::rename(new_solar=solar_capacity,new_battery=battery_capacity)
return(cer_sys_opt)
#return(b_s %>% dplyr::inner_join(cer_sys_opt))
}
#financially optimal solar pv system
b_s1 <- get_sys_optimal(params,b_s)
b_s1
#add in self-sufficiency/aversion effect
b_s1 <- b_s1 %>% dplyr::mutate(du=du+aversion[q9_1])
#add in self-sufficiency/aversion effect
b_s1 <- b_s1 %>% dplyr::mutate(du=du+averse[q9_1])
b_s1
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du)
b_s1
b_s1 %>% pull(du_fin)
b_s1 %>% dplyr::pull(du_fin)
#add in self-sufficiency/aversion effect
# and scale factor from calibration
#add parial utilities
b_s1 <- b_s1 %>% dplyr::mutate(du_fin=beta.*w_q9_1*du+averse[q9_1])
b_s1 %>% dplyr::pull(du_fin)
b_s1 %>% dplyr::pull(q9_1)
load_all()
scenario_wem <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx", sheet="scenario_WEM")
use_data(scenario_wem,overwrite = T)
load_all()
document()
check()
install()
agents_init
agents_init %>% mutate(w_q9_1 = max(0,w_q9_1))
agents_init %>% dplyr::mutate(w_q9_1 = max(0,w_q9_1))
agents_init %>% dplyr::mutate(w_q9_1 = case_when(w_q9_1<=0~,w_q9_1>0~w_q9_1))
agents_init %>% dplyr::mutate(w_q9_1 = case_when(w_q9_1<=0~0,w_q9_1>0~w_q9_1))
agents_init %>% dplyr::mutate(w_q9_1 = dplyr::case_when(w_q9_1<=0~0,w_q9_1>0~w_q9_1))
agents_init %>% dplyr::mutate(w_q9_1 = dplyr::case_when(w_q9_1<=0~0,w_q9_1>0~w_q9_1)) %>% plyr::filter(w_q9_1==0) %>% dim()
agents_init %>% dplyr::mutate(w_q9_1 = dplyr::case_when(w_q9_1<=0~0,w_q9_1>0~w_q9_1)) %>% dplyr::filter(w_q9_1==0) %>% dim()
46/759
agents_init %>% dplyr::mutate(w_q9_1 = dplyr::case_when(w_q9_1<=0~0,w_q9_1>0~w_q9_1)) %>% dplyr::filter(w_qsp21 < 0) %>% dim()
agents_init %>% dplyr::filter(w_qsp21 <0)
agents_init$w_theta %>% hist()
agents_init$w_qsp21 %>% hist()
agents_init$w_q9_1 %>% hist()
agents
agents <- agents_init
agents %>% dplyr::mutate(w_q9_1=dplyr::case_when(w_q9_1<=quantile(w_q9_1,0.05)~quantile(w_q9_1,0.05),w_q9_1>quantile(w_q9_1,0.05)~quantile(w_q9_1,0.05))
)
x_min <- quantile(agents$w_q9_1,0.05)
x_min
x_max <- quantile(agents$w_q9_1,0.95)
agents %>% dplyr::mutate(w_q9_1=dplyr::case_when(w_q9_1<=~x_min,w_q9_1>quantile(w_q9_1,0.05)~x_max)
agents %>% dplyr::mutate(w_q9_1=dplyr::case_when(w_q9_1<=x_min~x_min,w_q9_1>x_max~x_max)
agents %>% dplyr::mutate(w_q9_1=dplyr::case_when(w_q9_1<=x_min~x_min,w_q9_1>x_max~x_max)
)
agents %>% dplyr::mutate(w_q9_1=dplyr::case_when(w_q9_1<=x_min~x_min,w_q9_1>x_max~x_max, (w_q9_1> x_min) & (w_q9_1 < x_max)~w_q9_1)
)
agents_init <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/agents_init.csv")
use_data(agents_init,overwrite = T)
empirical_utils <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/empirical_utils.csv")
use_data(empirical_utils,overwrite=T)
agents <- agents_init
x_min <- quantile(agents$w_q9_1,0.05)
x_max <- quantile(agents$w_q9_1,0.95)
agents <- agents %>% dplyr::mutate(w_q9_1=dplyr::case_when(w_q9_1<=x_min~x_min,w_q9_1>x_max~x_max, (w_q9_1> x_min) & (w_q9_1 < x_max)~w_q9_1))
agents
load_all()
library(devtools)
load_all()
document()
check()
lambda.
beta.
aversion_4.
p.
install()
load_all()
document()
check()
install()
agents_init
agents_in <- initialise_agents(agents_init,2010)
agents_init
agents_in
agents_in <- initialise_agents(agents_init,2010)
load_all()
library(devtools)
load_all()
document()
check()
install()
